//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.296
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.296.
// 
#pragma warning disable 1591

namespace LicenserTest.ComSpexLix {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="LicenseServiceSoap", Namespace="http://comspex.com/lix/")]
    public partial class LicenseService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GenerateTestDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback HelloWorldOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddActivationSetOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetActivationSetOperationCompleted;
        
        private System.Threading.SendOrPostCallback CleanActivationCacheOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBase64StringOperationCompleted;
        
        private System.Threading.SendOrPostCallback DownloadActivationSetsOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadActivationSetsOperationCompleted;
        
        private System.Threading.SendOrPostCallback AlreadyRegisteredOperationCompleted;
        
        private System.Threading.SendOrPostCallback EncryptSessionKeyByRSAOperationCompleted;
        
        private System.Threading.SendOrPostCallback DecryptSessionKeyByRSAOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPublicKeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback ParseLicenseKeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLicenseStateStringsOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public LicenseService() {
            this.Url = global::LicenserTest.Properties.Settings.Default.LicenserTest_ComSpexLix_LicenseService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GenerateTestDataCompletedEventHandler GenerateTestDataCompleted;
        
        /// <remarks/>
        public event HelloWorldCompletedEventHandler HelloWorldCompleted;
        
        /// <remarks/>
        public event AddActivationSetCompletedEventHandler AddActivationSetCompleted;
        
        /// <remarks/>
        public event GetActivationSetCompletedEventHandler GetActivationSetCompleted;
        
        /// <remarks/>
        public event CleanActivationCacheCompletedEventHandler CleanActivationCacheCompleted;
        
        /// <remarks/>
        public event GetBase64StringCompletedEventHandler GetBase64StringCompleted;
        
        /// <remarks/>
        public event DownloadActivationSetsCompletedEventHandler DownloadActivationSetsCompleted;
        
        /// <remarks/>
        public event UploadActivationSetsCompletedEventHandler UploadActivationSetsCompleted;
        
        /// <remarks/>
        public event AlreadyRegisteredCompletedEventHandler AlreadyRegisteredCompleted;
        
        /// <remarks/>
        public event EncryptSessionKeyByRSACompletedEventHandler EncryptSessionKeyByRSACompleted;
        
        /// <remarks/>
        public event DecryptSessionKeyByRSACompletedEventHandler DecryptSessionKeyByRSACompleted;
        
        /// <remarks/>
        public event GetPublicKeyCompletedEventHandler GetPublicKeyCompleted;
        
        /// <remarks/>
        public event ParseLicenseKeyCompletedEventHandler ParseLicenseKeyCompleted;
        
        /// <remarks/>
        public event GetLicenseStateStringsCompletedEventHandler GetLicenseStateStringsCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://comspex.com/lix/GenerateTestData", RequestNamespace="http://comspex.com/lix/", ResponseNamespace="http://comspex.com/lix/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void GenerateTestData() {
            this.Invoke("GenerateTestData", new object[0]);
        }
        
        /// <remarks/>
        public void GenerateTestDataAsync() {
            this.GenerateTestDataAsync(null);
        }
        
        /// <remarks/>
        public void GenerateTestDataAsync(object userState) {
            if ((this.GenerateTestDataOperationCompleted == null)) {
                this.GenerateTestDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGenerateTestDataOperationCompleted);
            }
            this.InvokeAsync("GenerateTestData", new object[0], this.GenerateTestDataOperationCompleted, userState);
        }
        
        private void OnGenerateTestDataOperationCompleted(object arg) {
            if ((this.GenerateTestDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GenerateTestDataCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://comspex.com/lix/HelloWorld", RequestNamespace="http://comspex.com/lix/", ResponseNamespace="http://comspex.com/lix/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string HelloWorld() {
            object[] results = this.Invoke("HelloWorld", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void HelloWorldAsync() {
            this.HelloWorldAsync(null);
        }
        
        /// <remarks/>
        public void HelloWorldAsync(object userState) {
            if ((this.HelloWorldOperationCompleted == null)) {
                this.HelloWorldOperationCompleted = new System.Threading.SendOrPostCallback(this.OnHelloWorldOperationCompleted);
            }
            this.InvokeAsync("HelloWorld", new object[0], this.HelloWorldOperationCompleted, userState);
        }
        
        private void OnHelloWorldOperationCompleted(object arg) {
            if ((this.HelloWorldCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.HelloWorldCompleted(this, new HelloWorldCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://comspex.com/lix/AddActivationSet", RequestNamespace="http://comspex.com/lix/", ResponseNamespace="http://comspex.com/lix/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AddActivationSet(string data) {
            object[] results = this.Invoke("AddActivationSet", new object[] {
                        data});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AddActivationSetAsync(string data) {
            this.AddActivationSetAsync(data, null);
        }
        
        /// <remarks/>
        public void AddActivationSetAsync(string data, object userState) {
            if ((this.AddActivationSetOperationCompleted == null)) {
                this.AddActivationSetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddActivationSetOperationCompleted);
            }
            this.InvokeAsync("AddActivationSet", new object[] {
                        data}, this.AddActivationSetOperationCompleted, userState);
        }
        
        private void OnAddActivationSetOperationCompleted(object arg) {
            if ((this.AddActivationSetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddActivationSetCompleted(this, new AddActivationSetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://comspex.com/lix/GetActivationSet", RequestNamespace="http://comspex.com/lix/", ResponseNamespace="http://comspex.com/lix/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetActivationSet(string key) {
            object[] results = this.Invoke("GetActivationSet", new object[] {
                        key});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetActivationSetAsync(string key) {
            this.GetActivationSetAsync(key, null);
        }
        
        /// <remarks/>
        public void GetActivationSetAsync(string key, object userState) {
            if ((this.GetActivationSetOperationCompleted == null)) {
                this.GetActivationSetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetActivationSetOperationCompleted);
            }
            this.InvokeAsync("GetActivationSet", new object[] {
                        key}, this.GetActivationSetOperationCompleted, userState);
        }
        
        private void OnGetActivationSetOperationCompleted(object arg) {
            if ((this.GetActivationSetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetActivationSetCompleted(this, new GetActivationSetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://comspex.com/lix/CleanActivationCache", RequestNamespace="http://comspex.com/lix/", ResponseNamespace="http://comspex.com/lix/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CleanActivationCache(string password) {
            this.Invoke("CleanActivationCache", new object[] {
                        password});
        }
        
        /// <remarks/>
        public void CleanActivationCacheAsync(string password) {
            this.CleanActivationCacheAsync(password, null);
        }
        
        /// <remarks/>
        public void CleanActivationCacheAsync(string password, object userState) {
            if ((this.CleanActivationCacheOperationCompleted == null)) {
                this.CleanActivationCacheOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCleanActivationCacheOperationCompleted);
            }
            this.InvokeAsync("CleanActivationCache", new object[] {
                        password}, this.CleanActivationCacheOperationCompleted, userState);
        }
        
        private void OnCleanActivationCacheOperationCompleted(object arg) {
            if ((this.CleanActivationCacheCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CleanActivationCacheCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://comspex.com/lix/GetBase64String", RequestNamespace="http://comspex.com/lix/", ResponseNamespace="http://comspex.com/lix/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetBase64String(string text) {
            object[] results = this.Invoke("GetBase64String", new object[] {
                        text});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetBase64StringAsync(string text) {
            this.GetBase64StringAsync(text, null);
        }
        
        /// <remarks/>
        public void GetBase64StringAsync(string text, object userState) {
            if ((this.GetBase64StringOperationCompleted == null)) {
                this.GetBase64StringOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBase64StringOperationCompleted);
            }
            this.InvokeAsync("GetBase64String", new object[] {
                        text}, this.GetBase64StringOperationCompleted, userState);
        }
        
        private void OnGetBase64StringOperationCompleted(object arg) {
            if ((this.GetBase64StringCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBase64StringCompleted(this, new GetBase64StringCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://comspex.com/lix/DownloadActivationSets", RequestNamespace="http://comspex.com/lix/", ResponseNamespace="http://comspex.com/lix/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DownloadActivationSets(string password) {
            object[] results = this.Invoke("DownloadActivationSets", new object[] {
                        password});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DownloadActivationSetsAsync(string password) {
            this.DownloadActivationSetsAsync(password, null);
        }
        
        /// <remarks/>
        public void DownloadActivationSetsAsync(string password, object userState) {
            if ((this.DownloadActivationSetsOperationCompleted == null)) {
                this.DownloadActivationSetsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDownloadActivationSetsOperationCompleted);
            }
            this.InvokeAsync("DownloadActivationSets", new object[] {
                        password}, this.DownloadActivationSetsOperationCompleted, userState);
        }
        
        private void OnDownloadActivationSetsOperationCompleted(object arg) {
            if ((this.DownloadActivationSetsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DownloadActivationSetsCompleted(this, new DownloadActivationSetsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://comspex.com/lix/UploadActivationSets", RequestNamespace="http://comspex.com/lix/", ResponseNamespace="http://comspex.com/lix/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UploadActivationSets(string password, string data, bool isMerged) {
            this.Invoke("UploadActivationSets", new object[] {
                        password,
                        data,
                        isMerged});
        }
        
        /// <remarks/>
        public void UploadActivationSetsAsync(string password, string data, bool isMerged) {
            this.UploadActivationSetsAsync(password, data, isMerged, null);
        }
        
        /// <remarks/>
        public void UploadActivationSetsAsync(string password, string data, bool isMerged, object userState) {
            if ((this.UploadActivationSetsOperationCompleted == null)) {
                this.UploadActivationSetsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadActivationSetsOperationCompleted);
            }
            this.InvokeAsync("UploadActivationSets", new object[] {
                        password,
                        data,
                        isMerged}, this.UploadActivationSetsOperationCompleted, userState);
        }
        
        private void OnUploadActivationSetsOperationCompleted(object arg) {
            if ((this.UploadActivationSetsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadActivationSetsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://comspex.com/lix/AlreadyRegistered", RequestNamespace="http://comspex.com/lix/", ResponseNamespace="http://comspex.com/lix/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AlreadyRegistered(string key) {
            object[] results = this.Invoke("AlreadyRegistered", new object[] {
                        key});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AlreadyRegisteredAsync(string key) {
            this.AlreadyRegisteredAsync(key, null);
        }
        
        /// <remarks/>
        public void AlreadyRegisteredAsync(string key, object userState) {
            if ((this.AlreadyRegisteredOperationCompleted == null)) {
                this.AlreadyRegisteredOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAlreadyRegisteredOperationCompleted);
            }
            this.InvokeAsync("AlreadyRegistered", new object[] {
                        key}, this.AlreadyRegisteredOperationCompleted, userState);
        }
        
        private void OnAlreadyRegisteredOperationCompleted(object arg) {
            if ((this.AlreadyRegisteredCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AlreadyRegisteredCompleted(this, new AlreadyRegisteredCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://comspex.com/lix/EncryptSessionKeyByRSA", RequestNamespace="http://comspex.com/lix/", ResponseNamespace="http://comspex.com/lix/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string EncryptSessionKeyByRSA(string text, string keyToUse) {
            object[] results = this.Invoke("EncryptSessionKeyByRSA", new object[] {
                        text,
                        keyToUse});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void EncryptSessionKeyByRSAAsync(string text, string keyToUse) {
            this.EncryptSessionKeyByRSAAsync(text, keyToUse, null);
        }
        
        /// <remarks/>
        public void EncryptSessionKeyByRSAAsync(string text, string keyToUse, object userState) {
            if ((this.EncryptSessionKeyByRSAOperationCompleted == null)) {
                this.EncryptSessionKeyByRSAOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEncryptSessionKeyByRSAOperationCompleted);
            }
            this.InvokeAsync("EncryptSessionKeyByRSA", new object[] {
                        text,
                        keyToUse}, this.EncryptSessionKeyByRSAOperationCompleted, userState);
        }
        
        private void OnEncryptSessionKeyByRSAOperationCompleted(object arg) {
            if ((this.EncryptSessionKeyByRSACompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EncryptSessionKeyByRSACompleted(this, new EncryptSessionKeyByRSACompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://comspex.com/lix/DecryptSessionKeyByRSA", RequestNamespace="http://comspex.com/lix/", ResponseNamespace="http://comspex.com/lix/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DecryptSessionKeyByRSA(string text64) {
            object[] results = this.Invoke("DecryptSessionKeyByRSA", new object[] {
                        text64});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DecryptSessionKeyByRSAAsync(string text64) {
            this.DecryptSessionKeyByRSAAsync(text64, null);
        }
        
        /// <remarks/>
        public void DecryptSessionKeyByRSAAsync(string text64, object userState) {
            if ((this.DecryptSessionKeyByRSAOperationCompleted == null)) {
                this.DecryptSessionKeyByRSAOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDecryptSessionKeyByRSAOperationCompleted);
            }
            this.InvokeAsync("DecryptSessionKeyByRSA", new object[] {
                        text64}, this.DecryptSessionKeyByRSAOperationCompleted, userState);
        }
        
        private void OnDecryptSessionKeyByRSAOperationCompleted(object arg) {
            if ((this.DecryptSessionKeyByRSACompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DecryptSessionKeyByRSACompleted(this, new DecryptSessionKeyByRSACompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://comspex.com/lix/GetPublicKey", RequestNamespace="http://comspex.com/lix/", ResponseNamespace="http://comspex.com/lix/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetPublicKey() {
            object[] results = this.Invoke("GetPublicKey", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetPublicKeyAsync() {
            this.GetPublicKeyAsync(null);
        }
        
        /// <remarks/>
        public void GetPublicKeyAsync(object userState) {
            if ((this.GetPublicKeyOperationCompleted == null)) {
                this.GetPublicKeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPublicKeyOperationCompleted);
            }
            this.InvokeAsync("GetPublicKey", new object[0], this.GetPublicKeyOperationCompleted, userState);
        }
        
        private void OnGetPublicKeyOperationCompleted(object arg) {
            if ((this.GetPublicKeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPublicKeyCompleted(this, new GetPublicKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://comspex.com/lix/ParseLicenseKey", RequestNamespace="http://comspex.com/lix/", ResponseNamespace="http://comspex.com/lix/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ParseLicenseKey(string text64) {
            object[] results = this.Invoke("ParseLicenseKey", new object[] {
                        text64});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ParseLicenseKeyAsync(string text64) {
            this.ParseLicenseKeyAsync(text64, null);
        }
        
        /// <remarks/>
        public void ParseLicenseKeyAsync(string text64, object userState) {
            if ((this.ParseLicenseKeyOperationCompleted == null)) {
                this.ParseLicenseKeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnParseLicenseKeyOperationCompleted);
            }
            this.InvokeAsync("ParseLicenseKey", new object[] {
                        text64}, this.ParseLicenseKeyOperationCompleted, userState);
        }
        
        private void OnParseLicenseKeyOperationCompleted(object arg) {
            if ((this.ParseLicenseKeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ParseLicenseKeyCompleted(this, new ParseLicenseKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://comspex.com/lix/GetLicenseStateStrings", RequestNamespace="http://comspex.com/lix/", ResponseNamespace="http://comspex.com/lix/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetLicenseStateStrings() {
            object[] results = this.Invoke("GetLicenseStateStrings", new object[0]);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetLicenseStateStringsAsync() {
            this.GetLicenseStateStringsAsync(null);
        }
        
        /// <remarks/>
        public void GetLicenseStateStringsAsync(object userState) {
            if ((this.GetLicenseStateStringsOperationCompleted == null)) {
                this.GetLicenseStateStringsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLicenseStateStringsOperationCompleted);
            }
            this.InvokeAsync("GetLicenseStateStrings", new object[0], this.GetLicenseStateStringsOperationCompleted, userState);
        }
        
        private void OnGetLicenseStateStringsOperationCompleted(object arg) {
            if ((this.GetLicenseStateStringsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLicenseStateStringsCompleted(this, new GetLicenseStateStringsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GenerateTestDataCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void HelloWorldCompletedEventHandler(object sender, HelloWorldCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class HelloWorldCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal HelloWorldCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void AddActivationSetCompletedEventHandler(object sender, AddActivationSetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddActivationSetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddActivationSetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetActivationSetCompletedEventHandler(object sender, GetActivationSetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetActivationSetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetActivationSetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void CleanActivationCacheCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetBase64StringCompletedEventHandler(object sender, GetBase64StringCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBase64StringCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBase64StringCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void DownloadActivationSetsCompletedEventHandler(object sender, DownloadActivationSetsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DownloadActivationSetsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DownloadActivationSetsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void UploadActivationSetsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void AlreadyRegisteredCompletedEventHandler(object sender, AlreadyRegisteredCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AlreadyRegisteredCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AlreadyRegisteredCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void EncryptSessionKeyByRSACompletedEventHandler(object sender, EncryptSessionKeyByRSACompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EncryptSessionKeyByRSACompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EncryptSessionKeyByRSACompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void DecryptSessionKeyByRSACompletedEventHandler(object sender, DecryptSessionKeyByRSACompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DecryptSessionKeyByRSACompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DecryptSessionKeyByRSACompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetPublicKeyCompletedEventHandler(object sender, GetPublicKeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPublicKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPublicKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ParseLicenseKeyCompletedEventHandler(object sender, ParseLicenseKeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ParseLicenseKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ParseLicenseKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetLicenseStateStringsCompletedEventHandler(object sender, GetLicenseStateStringsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLicenseStateStringsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLicenseStateStringsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591